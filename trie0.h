#ifndef TRIE_H
#define TRIE_H
#include <iostream>
#include <windows.h> // Windows-специфичный заголовочный файл языка программирования С, в котором объявляются функции, предоставляющие интерфейс доступа к Windows API
#include <conio.h> // Заголовочный файл, доступный в некоторых средах разработки для MS-DOS и Windows. Предназначен для организации текстового ввода-вывода в этих операционных системах
#include "trie0.h"
using namespace std;
typedef unsigned short US; // Синоним (с целью уменьшения длины кода) для базового типа данных unsigned short
typedef const unsigned short CUS;
typedef const char CC;
typedef unsigned char UC;
typedef const unsigned char CUC;
typedef unsigned int UI;
CUS rza = 33 * 2 + 1 + 1; // Ёмкость узла префиксного дерева (буквы русского алфавита (прописные и строчные) плюс дефис и знак нижнего подчёркивания)
CUS rzb = 80; // Максимальное кол-во символов (длина строки без завершающего ноль-символа) в ширине использования экрана
CUS rzc = 7; // Кол-во символов в боковом колонтитуле (отбивка)
CUS rzd = 1; // Кол-во символов (зазор) между боковым колонтитулом и основным полем текста
CUS rze = rzb - rzc - rzd - 1; // Максимальный количество символов (без завершающего ноль-символа) в пользовательском вводе, сообщении или в результирующей (после конвертирования) строке
CUS rzf = 35; // Максимальный количество символов (без завершающего ноль-символа) в ключе префиксного дерева (самое длинное слово в русском языке)
CUS rzg = 3; // Минимальное (>0) количество символов (без завершающего ноль-символа) в слове префиксного дерева
CUS rzh = 65534; // Максимальное количество байт (без завершающего байт-ноль-символа) в пользовательском русском словаре
CUS rzi = 9; // Максимальное (<10) количество предлагаемых пользователю слов по введённому префиксу
CUS rzj = 2; // Минимальное количество символов в префиксе по которому идёт поиск слов в дереве
extern UC rez[]; // Результат конвертирования из UTF-8 в CP866 (все коды в положительной плоскости, а не так как в char)
extern UC var[]; // Варианты слов по префиксу без самого префикса. В конце каждого слова функция добавляет пробел (разделитель)
extern UC sms[]; // Текст сообщения в кодировке CP866
extern UC prf[]; // Префикс в кодировке CP866
extern CC* slv; // Пользовательский русский словарь (ПРС). Слова разделяются пробелом. В конце, так же должен быть пробел, иначе, последнее слово проигнорируется
extern CC* t01; // Первый текстовый блок
extern CC* t02;
extern CC* t03;
extern CC* t04;
struct TrieNode { // Структура узлов префиксного дерева
	struct TrieNode* deti[rza]; // Узел префиксного дерева (указатель на дочерний массив указателей)
	bool list; // Признак листа (конец слова). Эта переменная принимает значение "Истина", если узел является концом слова
};
TrieNode* getNewNode(void); // Создание нового пустого узла
void convUTF8toCP866(CC*, US); // Конвентирование си-строки из UTF-8 в CP866
void insKey(TrieNode*, CUC*); // Вставка ключа (слова) в префиксное дерево
void bldTrie(TrieNode*); // Построение префиксного дерева (деревьев) на основании ПРС
US findWords(TrieNode*, CUC*, US); // Поиск слов в дереве по префиксу
void entTextAuto(TrieNode*); // Ввод текста с автодополнением
#endif